# Function reference
### Adverbs
Adverbs take only one argument, which is an immediately following function, and return a new function.

 ~F    flips the arguments of the function. Informally: `x ~F y` is `y F x`
 /F    has two meanings, depending if it's called monadically or dyadically.
   /F y   applies F between all items of y. For example: `/+1 2 3` is `1+2+3`
   x /F y maps `x /F` to all items of y. For example: `1 2/+1 2 3` is `(1 2+1) (1 2+2) (1 2+3)`
 MF    is a shorthand for giving rank -1 -1 -1
 \F
   \F y   applies F to increasing subsets of y (0, 1, 2, 3... elements). Think of as scan.
   x \F y applies F to windows of y of width x (if x < 0, splits y to pieces of length abs(x))

### Conjunctions
Conjunctions always take two arguments, where left argument either a literal or a function, and right argument is a function. They can return anything.

 r^F  gives a function, which calls F with rank r.
 v/vF gives a folding function, which has a preset starting value of v.
 F@G  gives a function, which passes the result of G to F. Informally: `x F@G y` is `F x G y`
 v@F  gives a function which uses F to select a function from v if v is a list. Has rank of F.
 F@rG gives a function that calls F with the return value of G (has rank of G)
 F`G  gives a list with F and G. If F is a list, G is appended to it.
 F$G  when called dyadically:  (x F x G y)
                  monadically: (y F G y)
 F$lG when called dyadically:  (y F x G y)
                  monadically: (y F G y)
 F$rG when called dyadically:  ((x G y) F x)
                  monadically: ((G y) F y)

### Functions
x is always the left argument
y is always the right argument

name | rank  | definitions
+    | 0 0 0 | gives the sum of x and y - x defaults to 0
-    | 0 0 0 | gives the difference of y from x - `2-5` is 3 - x defaults to 0
+l   | M M M | gives x + [y] - padding of 0 1 0
+b   | 0 0 0 | gives x && y
*    | 0 0 0 | dyad:  gives the product of x and y
               monad: gives the sign of y, which is -1, 0 or 1
*p   | 0 0 0 | gives y ** x - x defaults to 2
*b   | 0 0 0 | gives x || y
%    | 0 0 0 | gives the dividend of x and y - x defaults to 0
|    | 0 0 0 | dyad:  gives the modulo of x and y
               monad: gives the absolute value of y
;    | M M M | dyad:  concatenates x and y
               monad: flattens y by one level
;p   | M M M | dyad:  gives [x, y]
               monad: flattens y completely
<    | 0 0 0 | returns x<y
>    | 0 0 0 | returns x>y
<e   | 0 0 0 | returns x<=y - x defaults to 0
>e   | 0 0 0 | returns x>=y - x defaults to 0
<c   | 0 0 0 | returns smaller of x and y
>c   | 0 0 0 | returns greater of x and y
=    | 0 0 0 | returns x==y - x defaults to 0
]    | M 0 M | nests x to a list y times - y defaults to 1
-l   | M M M | removes items of y from x - y defaults to [0]
-u   | M M M | dyad:  returns items of x which are in y
               monad: return unique items of x
?    | 1 0 1 | dyad:  returns table of shape y with values from 0 to x, inclusive
               monad: returns table of shape y with values from 0 to 1, inclusive
!    | 0 0 0 | dyad:  gives combinations(y, x) - yCx - uses simple cache
               monad: gives factorial of x
A    | M M M | returns y
B    | M M M | returns x
Ba   | 0 1 0 | maps integer y to base x - x defaults to [2] - experimentation recommended
Bn   | 1 1 1 | reverse of Ba: 5Bn5Ba10 gives 10
C    | M 0 M | counts the occurences of x in y
Ch   | 0 M 0 | chr(y)
Co   | 0 M 0 | ord(y)
D    | M M M | gives the depth of y
E    | M 0 M | dyad:  returns the last x items of y
               m0nad: returns the last item of y
F    | 1 0 1 | converts string y to float
H    | M 0 M | dyad:  returns the first x items of y
               monad: returns the first item of y
I    | 1 0 1 | converts string y to integer with base x - x defaults to 10
Ir   | 0 M 0 | rounds float y to integer
J    | M 1 M | joins items of y to a list by interleaving them with all items of x
Ld   | M 0 M | drops the first x items of y - x defaults to 1
Lr   | M 0 M | drops the last x items of y - x defaults to 1
Lt   | M M M | nests y by two levels (returns [[y]])
N    | M 0 M | dyad:  returns the xth item of y - if x is float, returns y[int(len(y)*x)]
               monad: returns length of y
O    | M M M | dyad:  sorts y using the indexes of sorted x
               monad: sorts y
P    | M M M | transposes y, filling with x if necessary - x defaults to 0
Pr   | M 1 M | prints y formatted with x (using Python's format) - returns 0
Ps   | M 0 M | dyad:  pads y to length of x, by prepending zeroes
               monad: pads array y to rectangle by prepending zeroes to all items
Pe   | M 0 M | dyad:  pads y to length of x, by appending zeroes
               monad: pads array y to rectangle by appending zeroes to all items
R    | 0 0 0 | dyad:  gives numbers from x to y, inclusive. Y can be less than x.
               monad: gives numbers from 0 to y, exclusive
S    | M M M | splits y by x (both can be any lists) - x defaults to " "
Sf   | M 1 M | formats y by x (every element of x is passed as an argument to format)
T    | 1 1 1 | dyad:  gives a table of shape x, using items of y cyclically
               monad: same, but uses range from 0 to infinity
V    | M M M | monad: reverses y

### Initial variables
Z    | empty list

